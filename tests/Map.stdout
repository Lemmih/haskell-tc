Bindings:
:: * â†’  *
  data [4mList[0m a = Nil | Cons a (List a)
:: Î›a. Main.List a
  data List a = [4mNil[0m | Cons a (List a)
:: Î›a. a â†’  Main.List a â†’  Main.List a
  data List a = Nil | [4mCons[0m a (List a)
:: âˆ€ sk_0_a sk_1_b. (sk_0_a â†’  sk_1_b) â†’  Main.List sk_0_a â†’  Main.List sk_1_b
  [4mmap f lst =[0m
  [4m  case lst of[0m
  [4m    Nil -> Nil[0m
  [4m    Cons x xs -> Cons (f x) (map f xs)[0m
:: sk_0_a â†’  sk_1_b
  map [4mf[0m lst =
:: Main.List sk_0_a
  map f [4mlst[0m =
:: sk_0_a
      Cons [4mx[0m xs -> Cons (f x) (map f xs)
:: Main.List sk_0_a
      Cons x [4mxs[0m -> Cons (f x) (map f xs)

Proofs:
coercion: (âˆ€ a. Main.List a) @ sk_0_a
      [4mNil[0m -> Nil
coercion: (âˆ€ a. a â†’  Main.List a â†’  Main.List a) @ sk_0_a
      [4mCons[0m x xs -> Cons (f x) (map f xs)
coercion: Main.List sk_0_a
    case [4mlst[0m of
coercion: (âˆ€ a. Main.List a) @ sk_1_b
      Nil -> [4mNil[0m
coercion: (âˆ€ a. a â†’  Main.List a â†’  Main.List a) @ sk_1_b
      Cons x xs -> [4mCons[0m (f x) (map f xs)
coercion: sk_0_a â†’  sk_1_b
      Cons x xs -> Cons ([4mf[0m x) (map f xs)
coercion: sk_0_a
      Cons x xs -> Cons (f [4mx[0m) (map f xs)
coercion: (âˆ€ a b. (a â†’  b) â†’  Main.List a â†’  Main.List b) @ sk_0_a sk_1_b
      Cons x xs -> Cons (f x) ([4mmap[0m f xs)
coercion: sk_0_a â†’  sk_1_b
      Cons x xs -> Cons (f x) (map [4mf[0m xs)
coercion: Main.List sk_0_a
      Cons x xs -> Cons (f x) (map f [4mxs[0m)

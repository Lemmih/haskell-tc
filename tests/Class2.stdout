Bindings:
:: *
  data [4mString[0m
:: *
  data [4mBool[0m = True | False
:: Class2.Bool
  data Bool = [4mTrue[0m | False
:: Class2.Bool
  data Bool = True | [4mFalse[0m
:: âˆ€ a. Class2.Show a â‡’ a â†’  Class2.String
    [4mshow[0m :: a -> String
:: âˆ€ a. a â†’  Class2.String
  [4mfalse x = show False[0m
:: a
  false [4mx[0m = show False
:: âˆ€ a. Class2.Show a â‡’ (Class2.Bool â†’  a) â†’  Class2.String
  [4mfalseFn x = show (x False)[0m
:: Class2.Bool â†’  a
  falseFn [4mx[0m = show (x False)
:: âˆ€ a. Class2.Show a â‡’ a â†’  Class2.String
  [4mshow' x = show x[0m
:: a
  show' [4mx[0m = show x

Proofs:
coercion: Class2.Show Class2.Bool
  instance [4mShow Bool[0m
coercion: (âˆ€ a. Class2.Show a â‡’ a â†’  Class2.String) @ Class2.Bool
  false x = [4mshow[0m False
coercion: Class2.Bool
  false x = show [4mFalse[0m
coercion: (âˆ€ a. Class2.Show a â‡’ a â†’  Class2.String) @ a
  falseFn x = [4mshow[0m (x False)
coercion: Class2.Bool â†’  a
  falseFn x = show ([4mx[0m False)
coercion: Class2.Bool
  falseFn x = show (x [4mFalse[0m)
coercion: (âˆ€ a. Class2.Show a â‡’ a â†’  Class2.String) @ a
  show' x = [4mshow[0m x
coercion: a
  show' x = show [4mx[0m

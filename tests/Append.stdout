Bindings:
:: * â†’  *
  data [4mList[0m a = Nil | Cons a (List a)
:: Î›a. Append.List a
  data List a = [4mNil[0m | Cons a (List a)
:: Î›a. a â†’  Append.List a â†’  Append.List a
  data List a = Nil | [4mCons[0m a (List a)
:: âˆ€ sk_0_x. Append.List sk_0_x â†’  Append.List sk_0_x â†’  Append.List sk_0_x
  [4mappend a b =[0m
  [4m  case a of[0m
  [4m    Nil       -> b[0m
  [4m    Cons x xs -> Cons x (append xs b)[0m
:: Append.List sk_0_x
  append [4ma[0m b =
:: Append.List sk_0_x
  append a [4mb[0m =
:: sk_0_x
      Cons [4mx[0m xs -> Cons x (append xs b)
:: Append.List sk_0_x
      Cons x [4mxs[0m -> Cons x (append xs b)

Proofs:
coercion: (âˆ€ a. Append.List a) @ sk_0_x
      [4mNil[0m       -> b
coercion: (âˆ€ a. a â†’  Append.List a â†’  Append.List a) @ sk_0_x
      [4mCons[0m x xs -> Cons x (append xs b)
coercion: sk_0_x
      Cons x xs -> Cons [4mx[0m (append xs b)
coercion: Append.List sk_0_x
      Cons x xs -> Cons x [4m(append xs b)[0m
coercion: Append.List sk_0_x
      Cons x xs -> Cons x (append [4mxs[0m b)
coercion: Append.List sk_0_x
      Cons x xs -> Cons x (append xs [4mb[0m)
coercion: Append.List sk_0_x
    case [4ma[0m of
coercion: Append.List sk_0_x
      Nil       -> [4mb[0m
coercion: (âˆ€ a. a â†’  Append.List a â†’  Append.List a) @ sk_0_x
      Cons x xs -> [4mCons[0m x (append xs b)
coercion: sk_0_x
      Cons x xs -> Cons [4mx[0m (append xs b)
coercion: (âˆ€ x. Append.List x â†’  Append.List x â†’  Append.List x) @ sk_0_x
      Cons x xs -> Cons x ([4mappend[0m xs b)
coercion: Append.List sk_0_x
      Cons x xs -> Cons x (append [4mxs[0m b)
coercion: Append.List sk_0_x
      Cons x xs -> Cons x (append xs [4mb[0m)
